openapi: 3.0.3
info:
  title: Flask REST API Template
  version: 1.0.0
  description: This template repository contains a Flask app based RESTful API.
  contact:
    email: hello@mashsoftware.com
    name: Mash Software
    url: https://www.mashsoftware.com/
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT
externalDocs:
  url: https://github.com/MashSoftware/flask-rest-api
  description: GitHub
servers:
  - url: http://localhost:{port}/{version}
    description: Local development
    variables:
      port:
        default: "3001"
      version:
        default: v1
  - url: https://mash-flask-rest-api.herokuapp.com/{version}
    description: Production
    variables:
      version:
        default: v1
tags:
  - name: User
    description: Operations on the User resource
  - name: Thing
    description: Operations on the Thing resource
  - name: Authentication
    description: User authentication operations
paths:
  /users:
    get:
      summary: Retrieve a list of users
      operationId: list_users
      tags:
        - User
      security:
        - bearerAuth: []
      parameters:
        - name: email_address
          in: query
          description: Email address to filter by
          required: false
          example: mash@example.com
          schema:
            type: string
            format: email
        - name: sort
          in: query
          description: Attribute to sort on
          required: true
          example: created_at
          schema:
            type: string
            enum:
              - email_address
              - created_at
              - updated_at
        - name: order
          in: query
          description: Order of sorted attribute
          required: true
          example: desc
          schema:
            type: string
            enum:
              - asc
              - desc
      responses:
        "200":
          description: An array of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserItem"
        "204":
          description: No users found
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Create a new user
      operationId: create_user
      tags:
        - User
      requestBody:
        description: New user data to create
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRequest"
      responses:
        "201":
          description: Newly created user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
          headers:
            Location:
              description: URL of the newly created user
              schema:
                type: string
                format: uri
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/{user_id}:
    get:
      summary: Retrieve a user with a specific ID
      operationId: get_user
      tags:
        - User
      security:
        - bearerAuth: []
      parameters:
        - name: user_id
          in: path
          description: ID of the user to retrieve
          required: true
          example: d9ecd6ee-3ab8-473b-9585-bc653024bed9
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: User response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      summary: Update a user with a specific ID
      operationId: update_user
      tags:
        - User
      security:
        - bearerAuth: []
      parameters:
        - name: user_id
          in: path
          description: ID of the user to update
          required: true
          example: d9ecd6ee-3ab8-473b-9585-bc653024bed9
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: User response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: Delete a user with a specific ID
      operationId: delete_user
      tags:
        - User
      security:
        - bearerAuth: []
      parameters:
        - name: user_id
          in: path
          description: ID of the user to delete
          required: true
          example: d9ecd6ee-3ab8-473b-9585-bc653024bed9
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: User deleted
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /auth/token:
    get:
      summary: Retrieve an authentication token
      operationId: get_token
      tags:
        - Authentication
      security:
        - basicAuth: []
      responses:
        "200":
          description: JWT authentication token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Token"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  /things:
    get:
      summary: Retrieve a list of things
      operationId: list_things
      tags:
        - Thing
      security:
        - bearerAuth: []
      parameters:
        - name: name
          in: query
          description: Name to filter by
          required: false
          example: Apple
          schema:
            type: string
        - name: colour
          in: query
          description: Colour to filter by
          required: false
          example: red
          schema:
            type: string
            enum:
              - red
              - green
              - blue
              - yellow
              - orange
              - purple
              - black
              - white
        - name: quantity
          in: query
          description: Quantity to filter by
          required: false
          example: 4
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: Attribute to sort on
          required: true
          example: created_at
          schema:
            type: string
            enum:
              - name
              - colour
              - quantity
              - created_at
              - updated_at
        - name: order
          in: query
          description: Order of sorted attribute
          required: true
          example: desc
          schema:
            type: string
            enum:
              - asc
              - desc
      responses:
        "200":
          description: An array of things
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ThingItem"
        "204":
          description: No things found
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Create a new thing
      operationId: create_thing
      tags:
        - Thing
      security:
        - bearerAuth: []
      requestBody:
        description: New thing data to create
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ThingRequest"
      responses:
        "201":
          description: Newly created thing
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Thing"
          headers:
            Location:
              description: URL of the newly created thing
              schema:
                type: string
                format: uri
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /things/{thing_id}:
    get:
      summary: Retrieve a thing with a specific ID
      operationId: get_thing
      tags:
        - Thing
      security:
        - bearerAuth: []
      parameters:
        - name: thing_id
          in: path
          description: ID of the thing to retrieve
          required: true
          example: d9ecd6ee-3ab8-473b-9585-bc653024bed9
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Thing response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Thing"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      summary: Update a thing with a specific ID
      operationId: update_thing
      tags:
        - Thing
      security:
        - bearerAuth: []
      parameters:
        - name: thing_id
          in: path
          description: ID of the thing to update
          required: true
          example: d9ecd6ee-3ab8-473b-9585-bc653024bed9
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Thing response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThingRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: Delete a thing with a specific ID
      operationId: delete_thing
      tags:
        - Thing
      security:
        - bearerAuth: []
      parameters:
        - name: thing_id
          in: path
          description: ID of the thing to delete
          required: true
          example: d9ecd6ee-3ab8-473b-9585-bc653024bed9
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Thing deleted
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    UserRequest:
      type: object
      required:
        - email_address
        - password
      properties:
        email_address:
          type: string
          format: email
          example: mash@example.com
          maxLength: 256
        password:
          type: string
          example: CorrectHorseBatteryStaple
          minLength: 8
          maxLength: 72
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: d9ecd6ee-3ab8-473b-9585-bc653024bed9
        email_address:
          type: string
          format: email
          example: mash@example.com
          maxLength: 256
        created_at:
          type: string
          format: date-time
          example: "2021-04-20T22:04:51.583801+01:00"
        updated_at:
          type: string
          format: date-time
          nullable: true
          example: "2021-04-20T22:16:57.492478+01:00"
    UserItem:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: d9ecd6ee-3ab8-473b-9585-bc653024bed9
        email_address:
          type: string
          format: email
          example: mash@example.com
          maxLength: 256
    ThingRequest:
      type: object
      required:
        - name
        - colour
        - quantity
      properties:
        name:
          type: string
          example: Apple
          maxLength: 32
        colour:
          type: string
          enum:
            - red
            - green
            - blue
            - yellow
            - orange
            - purple
            - black
            - white
        quantity:
          type: integer
          format: int32
          example: 4
    Thing:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: d9ecd6ee-3ab8-473b-9585-bc653024bed9
        name:
          type: string
          example: Apple
          maxLength: 32
        colour:
          type: string
          enum:
            - red
            - green
            - blue
            - yellow
            - orange
            - purple
            - black
            - white
        quantity:
          type: integer
          format: int32
          example: 4
        user_id:
          type: string
          format: uuid
          example: d9ecd6ee-3ab8-473b-9585-bc653024bed9
        created_at:
          type: string
          format: date-time
          example: "2021-04-20T22:04:51.583801+01:00"
        updated_at:
          type: string
          format: date-time
          nullable: true
          example: "2021-04-20T22:16:57.492478+01:00"
    ThingItem:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: d9ecd6ee-3ab8-473b-9585-bc653024bed9
        name:
          type: string
          example: Apple
          maxLength: 32
        colour:
          type: string
          enum:
            - red
            - green
            - blue
            - yellow
            - orange
            - purple
            - black
            - white
        quantity:
          type: integer
          format: int32
          example: 4
    Token:
      type: object
      properties:
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
    Error:
      type: object
      properties:
        name:
          type: string
          example: Not Found
        description:
          type: string
          example: The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.
  responses:
    UnauthorizedError:
      description: Credentials are missing or invalid
      headers:
        WWW-Authenticate:
          description: The authentication method that should be used
          schema:
            type: string
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
